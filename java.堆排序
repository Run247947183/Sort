package package1112;

import com.sun.org.apache.xpath.internal.SourceTree;

import java.util.Arrays;
import java.util.Stack;

public class SortDemo {
 // 堆排序
    public static void heapSort(int[] array) {
        // 1. 建堆
        createHeap(array);
        // 2. 循环取出堆顶的最大值，放到最后面
        for (int i = 0; i < array.length; i++) {
            // 待排序区间: [0, array.length - i)
            // 已排序区间: [array.length - i, array.length)0
            swap(array, 0, array.length - i - 1);
            // 第一个参数是数组
            // 第二个参数是数组中的有效元素的个数
            // 第三个参数是从哪个位置进行向下调整
            // 注意此处再向下调整的时候要先减去 1
            // 因为在进行向下调整的时候前面已经将开头最大的元素放置数组已排序区间的最末端
            shiftDown(array, array.length - i - 1, 0);
        }
    }

    private static void createHeap(int[] array) {
        // 从最后一个非叶子节点出发，从后往前向下调整
        for (int i = (array.length - 1 - 1) / 2; i >= 0; i--) {
            shiftDown(array, array.length, i);
        }
    }

    // O(logN)
    private static void shiftDown(int[] array, int size, int index) {
        int parent = index;
        int child = 2 * parent + 1;
        while (child < size) {
            if (child + 1 < size &&
                    array[child + 1] > array[child]) {
                child = child + 1;
            }
            // 经历了上面的 if 之后, child 指向左右子树的最大值
            if (array[child] > array[parent]) {
                // 建立大堆.
                swap(array, child, parent);
            } else {
                break;
            }
            parent = child;
            child = 2 * parent + 1;
        }
    }
    
     private static void swap(int[] array, int x, int y) {
        int tmp = array[x];
        array[x] = array[y];
        array[y] = tmp;
    }
    
    public static void main(String[] args) {
        int[] arr = {9, 5, 2, 7, 3, 6, 8, 1};
//        insertSort(arr);
//        shellSort(arr);
//        selectSort(arr);
        heapSort(arr);
//        quickSort(arr);
//        quickSortByLoop(arr);
//        mergeSort(arr);
        System.out.println(Arrays.toString(arr));
    }
}
