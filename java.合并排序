package package1112;

import com.sun.org.apache.xpath.internal.SourceTree;

import java.util.Arrays;
import java.util.Stack;

public class SortDemo {
    // 合并排序
    public static void mergeSort(int[] array) {
        mergeSortHelper(array, 0, array.length);
    }

    private static void mergeSortHelper(int[] array, int left, int right) {
        if (left >= right || right - left == 1) {
            return;
        }
        int mid = (left + right) / 2;
        mergeSortHelper(array, left, mid);
        mergeSortHelper(array, mid, right);
        // 合并两个数组操作 merge
        merge(array, left, mid, right);
    }

    private static void merge(int[] array, int left,
                                int mid, int right) {
        int length = right - left;
        int[] output = new int[length];

        int outputIndex = 0;

        int i = left;
        int j = mid;
        while (i < mid && j < right) {
            if (array[i] <= array[j]) {
                output[outputIndex++] = array[i++];
            } else {
                output[outputIndex++] = array[j++];
            }
        }
        while (i < mid) {
            output[outputIndex++] = array[i++];
        }
        while (j < right) {
            output[outputIndex++] = array[j++];
        }

        for (int k = 0; k < length; k++) {
            array[left + k] = output[k];
        }
    }
    public static void main(String[] args) {
        int[] arr = {9, 5, 2, 7, 3, 6, 8, 1};
//        insertSort(arr);
//        shellSort(arr);
//        selectSort(arr);
        heapSort(arr);
//        quickSort(arr);
//        quickSortByLoop(arr);
//        mergeSort(arr);
        System.out.println(Arrays.toString(arr));
    }
}
