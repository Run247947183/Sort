
利用快排的做法来解决



import java.util.*;

public class Finder {
    public int findKth(int[] a, int n, int K) {
        return quickSort(a, 0, n - 1, K);
    }
    public int quickSort(int[] arr, int left, int right, int K) {
        int pos = partition(arr, left, right);
        if (pos - left + 1 == K) {
            return arr[pos];
        } else if (pos - left + 1 > K) {   
            return quickSort(arr, left, pos - 1, key);
        } else {
            // 注意这里的K是：减去前面的几大数字，也就是说
            // 现在已经把前（pos - left + 1）大的数字排序好了
            // 还剩下K减去前面排序好的几大数字，剩下的就是我们要寻找的 K 大数字
            return quickSort(arr, pos + 1, right, K - pos + left - 1);
        }
    }
    public int partition(int[] arr, int left, int right) {
        int baseIndex = right;
        int baseValue = arr[right];
        while (left < right) {
            while (left < right && arr[left] >= baseValue) {
                left++;
            }
            while (left < right && arr[right] <= baseValue) {
                right--;
            }
            swap(arr, left, right);
        }
        swap(arr, left, baseIndex);
        return left;
    }
    public void swap(int[] arr, int x, int y) {
        int tmp = arr[x];
        arr[x] = arr[y];
        arr[y] = tmp;
    }
}
